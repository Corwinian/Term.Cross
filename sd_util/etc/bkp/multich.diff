11,14c11
< 
< // для DosSetPriority
< #define INCL_DOSPROCESS
< #include <os2.h>
---
> #include <Log.h>
24,29c21,27
< -l1             Не печатать никаких сообщений.\n\
< -l2             Печатать сообщения об ошибках.\n\
< -l3             Дополнительно печатать информационные сообщения.\n\
< -l4             Дополнительно печатать отладочные сообщения.\n\
< -l5             Дополнительно печатать дампы буферов.\n\
< -ls             Дублировать печать сообщений в log-файл выводом на экран.\n" ;
---
> -llevel={dump,debug,info,warning,error,fatal} уровень вывода сообщений.\n\
> -lerr           Выводить сообщения в стандартный поток ошибок.\n\
> -lout           Выводить сообщения в стандартный поток вывода.\n\
> -lfile=<name>   Выводить сообщения в файл с именем name,\n\
>                 файл создаётся заново\n\
> -lappend=<name> Выводить сообщения в файл с именем name,\n\
>                 сообщения дописываются в конец файла\n";
31,32c29,30
< char option_l_present;
< char option_l = TLog::err;  // 1,2,3,4,5
---
> // Значение переменной  среды TERM_ROOT
> char * term_root = ".";
34,35c32,34
< char option_ls_present;
< char option_ls = 1;      // 1,2
---
> /*
> 	Опции из коммандной строки имеют более высокий приоритет чем опции из файла конфигураций.
> */
37,38c36,41
< char cfg_log_level;      // 1,2,3,4,5
< char cfg_log_display;    // 1,2
---
> nsCLog::eSeverity logLevel = nsCLog::info;
> bool useStdErr = false;
> bool useStdOut = false;
> string logFileName = string();
> bool append = false;
> CLog *logfile;
40,42c43,44
< char exeFileName[_MAX_PATH];    // argv[0]
< char cfgName[_MAX_FNAME];
< char cfgFileName[_MAX_PATH];
---
> char exeFileName[MAX_PATH];    // argv[0]
> char cfgName[MAX_FNAME];
45,52c47,48
< char inputFileName[3][_MAX_PATH];
< char outputFileName[_MAX_PATH];
< 
< // int satId;
< // ulong totalFrameNum;
< char logLevel;
< char logDisplay;
< TLog * logfile;
---
> char inputFileName[3][MAX_PATH];
> char outputFileName[MAX_PATH];
71,72c67,68
<     double a_day[6];
<     double a_night[6];
---
> 	double a_day[6];   // для дня
> 	double a_night[6]; // дня ночи
95c91,93
< char msg[_MAX_PATH+2048];
---
> char msg[64000];                      // Буфер для сообщений лога
> 
> #include "multich.hpp"
98d95
<     DosSetPriority( PRTYS_PROCESSTREE, PRTYC_IDLETIME, 31, 0 );
100c97
<     if( argc == 1 ){
---
> 	if( argc < 3 ) {
104,106c101,106
<     if( parseCommandString( argc, argv ) != 0 ){
<         printf( "ошибка: неправильная командная строка\n" );
<         return 1;
---
> 
> 	char * t;
> 	if(NULL!=(t = getenv("TERM_ROOT"))){
> 		term_root = strdup(t);
> 	} else{
> 		fprintf( stderr, "Переменная TERM_ROOT не установлена, будет использован текущий путь.\n" );
108a109,111
> 	strcpy( exeFileName, argv[0] );
> 	strcpy( inputFileName[0], argv[argc-1] );
> 	strcpy( cfgName, argv[argc-2] );
110,111c113,118
<     if( createLog() != 0 ){
<          return 1;
---
> 	try {
> 		readCfg();
> 		parseCommandString( argc, argv );
> 	} catch (TException e) {
> 		fprintf( stderr, "%s\n", e.text() );
> 		exit(-1);
114c121
<     TAutoPtr<TLog> a_logfile(logfile);
---
> 	logfile = new CLog("multich.exe");
116,118c123,136
<     logfile->info( "чтение конфигурации" );
<     if( readCfg() != 0 ){
<          return 1;
---
> 	if(useStdOut) {
> 		//logfile.addAppender(new ConsoleLogAppender(logLevel,"%s | %e | %m"));
> 		logfile->addAppender(new CConsoleLogAppender(logLevel, "%e | %m"));
> 	}
> 	if(useStdErr) {
> 		//logfile.addAppender(new EConsoleLogAppender(logLevel,"%s | %e | %m"));
> 		logfile->addAppender(new EConsoleLogAppender(logLevel, "%e | %m"));
> 	}
> 	if(!logFileName.empty()) {
> 		try {
> 			logfile->addAppender(new CFileLogAppender(logLevel, logFileName, append, "%s | %e | %m"));
> 		} catch(string e) {
> 			fprintf(stderr,e.c_str());
> 			exit(1);
120,122d137
< 
< 	if( checkInputFileNameFormat() != 0){
<          return 1;
125c140
<     construct_file_names();
---
> 	TAutoPtr<CLog> aLogFile( logfile );
127,132c142,144
<     // устанавливаем уровень отображения логов с учетом параметров в конфигурационном файле
<     logLevel = option_l_present ? option_l : cfg_log_level;
<     logDisplay = option_ls_present ? option_ls : cfg_log_display;
<     logfile->
<         setLogLevel( TLog::MessageLevel( logLevel ) ).
<         setLogDisplay( TLog::MessageDisplay( logDisplay ) );
---
> 	logfile->info( string("multich.exe - ") + inputFileName[0] );
> 
> 	construct_file_names();
139d150
<     ch3_exist_flag = 1;
152a164
> 
154c166
<         readBlk0( inputFileName[2], in5_blk0 ) ){
---
> 	    verifyBlk0( in4_blk0, inputFileName[1] ) != 0 ) {
158,159c170,171
<     if( verifyBlk0( in4_blk0, inputFileName[1] ) != 0 ||
<         verifyBlk0( in5_blk0, inputFileName[2] ) != 0 ){
---
> 	if( readBlk0( inputFileName[2], in5_blk0 ) != 0 ||
> 	    verifyBlk0( in5_blk0, inputFileName[2] ) ) {
171c183
<     short *in3_data = NULL;
---
> 	short *in3_data = 0;
195a208
> 							in3_blk0, in3_data,
217a231,234
> void readCfg() throw (TException) {
> 	char path[MAX_PATH];
> 	const char * s;
> 	TCfg* cfg = NULL;
219,230c236,243
< int createLog(){
<     char drive[_MAX_DRIVE], dir[_MAX_DIR], path[_MAX_PATH], name[_MAX_FNAME], ext[_MAX_EXT];
<     _splitpath( inputFileName[0], drive, dir, name, ext );
<     _makepath( path, drive, dir, "term", "log" );
< 
<     try{
< 		sprintf( msg, "MULTICH.EXE - %s%s", name, ext );
<         logfile = new TLog( path, msg, TLog::MessageLevel(option_l) );
<     }
<     catch( TAccessExc e ){
<         printf( "%s\n", e.text() );
<         return 1;
---
> 	if((NULL == strchr(cfgName,'\\'))&&
> 			(NULL == strchr(cfgName,'/'))&&
> 			(NULL == strchr(cfgName,'.'))) {
> 		strcpy(path,term_root);
> 		int t = strlen(path);
> 		/* Если надо, в конце добавляем разделитель */
> 		if(path[t-1]!='/'||path[t-1]!='\\'){
> 			path[t] = DIRD; path[t+1] = '\0';
232c245,253
<     return 0;
---
> #if DIRD == '/'
> 		strcat( path, "cfg/" );
> #else
> 		strcat( path, "cfg\\" );
> #endif
> 		strcat( path, cfgName );
> 		strcat( path, ".cfg" );
> 	} else {
> 		strcpy(path,cfgName);
235,247d255
< int readCfg(){
<     char drive[_MAX_DRIVE], dir[_MAX_DIR], path[_MAX_PATH];
<     const char * s;
<     TCfg * cfg;
< 
<     _splitpath( exeFileName, drive, dir, 0, 0 );
<     strcat( dir, dir[0] ? "cfg" : "\\cfg" );
<     _makepath( path, drive, dir, cfgName, "cfg" );
<     logfile->debug( "config path:" );
<     logfile->debug( path );
<     logfile->debug( "" );
< 
<     try{
249,253d256
<     }
<     catch ( TException e ){
<         logfile -> error( e.text() );
<         return 1;
<     }
256,285c259,282
<         s = cfg->getValue( "LOG_LEVEL" );
<         sprintf( msg, "LOG_LEVEL = %s", s );
<         logfile->debug( msg );
<         cfg_log_level = *s - '0';
<         s = cfg->getValue( "LOG_DISPLAY" );
<         sprintf( msg, "LOG_DISPLAY = %s", s );
<         logfile->debug( msg );
<         cfg_log_display = *s - '0';
<     }
<     catch( TRequestExc e ){
<         delete cfg;
<         logfile->error( e.text() );
<         return 1;
<     }
<     delete cfg;
<     return 0;
< }
< 
< int checkInputFileNameFormat()
< {
<     char fname[_MAX_FNAME], ext[_MAX_EXT];
< 
<     _splitpath( inputFileName[0], 0, 0, fname, ext );
< 
<     if( strcmp( ext, ".clb" ) != 0  ) goto error;
<     if( strlen( fname ) != 8 ) goto error;
<     if( fname[0] != 'n' || !isdigit(fname[1]) || !isdigit(fname[2]) ||
<         !isdigit(fname[3]) || !isdigit(fname[4]) || !isdigit(fname[5]) || fname[6] != '_' ) goto error;
<     if( fname[7] != '4' ) goto error;
<     return 0;
---
> 		s = cfg->getValue( "LOG_LEVEL" );           /* допустимые значения: dump,debug,info,warning,error,fatal */
> 		if( nsCLog::unknown == (logLevel = nsCLog::getThresholdFromString(string(s))))
> 			logLevel = nsCLog::info;
> 	} catch(...) {}
> 	try {
> 		s = cfg->getValue( "LOG_STDERR" );           //
> 		if('1' == *s)
> 			useStdErr = true;
> 	} catch(...) {}
> 	try {
> 		s = cfg->getValue( "LOG_STDOUT" );           //
> 		if('1' == *s)
> 			useStdOut = true;
> 	} catch(...) {}
> 	try {
> 		s = cfg->getValue( "LOG_APPEND" );           //
> 		logFileName = s;
> 		append = true;
> 	} catch(...) {}
> 	try {
> 		s = cfg->getValue( "LOG_FILE" );         /* имя файла */
> 		logFileName = s;
> 		append = false;
> 	} catch(...) {}
287,289c284
< error:
<     logfile->error( "неправильный формат имени входного файла" );
<     return 1;
---
> 	delete cfg;
292,295c287,289
< void construct_file_names()
< {
<     char drive[_MAX_DRIVE], dir[_MAX_DIR], fname[_MAX_FNAME], fext[_MAX_EXT], s[_MAX_FNAME];
<     _splitpath( inputFileName[0], drive, dir, fname, fext );
---
> void construct_file_names() {
> 	char drive[MAX_DRIVE], dir[MAX_DIR], fname[MAX_FNAME], fext[MAX_EXT]; //, s[_MAX_FNAME];
> 	splitpath( inputFileName[0], drive, dir, fname, fext );
299c293
<     _makepath( inputFileName[0], drive, dir, fname, "clb" );
---
> 	makepath( inputFileName[0], drive, dir, fname, "clb" );
301c295
<     _makepath( inputFileName[1], drive, dir, fname, "clb" );
---
> 	makepath( inputFileName[1], drive, dir, fname, "clb" );
303c297
<     _makepath( inputFileName[2], drive, dir, fname, "clb" );
---
> 	makepath( inputFileName[2], drive, dir, fname, "clb" );
305c299
<     _makepath( outputFileName, drive, dir, fname, "mch" );
---
> 	makepath( outputFileName, drive, dir, fname, "mch" );
316,318c310
< int parseCommandString( int argc, char * argv [] )
< {
<     strcpy( exeFileName, argv[0] );
---
> void parseCommandString( int argc, char* argv[] ) throw (TException) {
325,339c317,339
<                 if( *s == 's' ){     // опция -ls
<                     option_ls_present = 1;
<                     option_ls = 2;
<                 }
<                 else {
<                     option_l_present = 1;
<                     option_l = *s - '0';
<                     if( option_l < 1 || option_l > 5 ) return 1;
<                 }
<             }
<             else return 1;  // указана неизвестная опция
<         }
<         else {  // встретили не опцию
<             if( cfgName[0] == 0 ){
<                 strcpy( cfgName, s );
---
> 				if(!strcmp(s,"err"))
> 					useStdErr = true;
> 				else if(!strcmp(s,"out"))
> 					useStdOut = true;
> 				else if(!strncmp(s,"file=",5)) {
> 					s+=5;
> 					if(strlen(s)==0)
> 						throw TException(100, "Недопустимое значение параметра -lfile=<file name>");
> 					logFileName.assign((char*)s);
> 					append = false;
> 				} else if(!strncmp(s,"append=",7)) {
> 					s+=7;
> 					if(strlen(s)==0)
> 						throw TException(100, "Недопустимое значение параметра -lappend=<file name>");
> 					logFileName.assign((char*)s);
> 					append = true;
> 				} else if(!strncmp(s,"level=",6)) {
> 					s+=6;
> 					if(nsCLog::unknown == (logLevel = nsCLog::getThresholdFromString(string(s))))
> 						throw TException(100, "Недопустимое значение параметра -llevel=<message level>");
> 				} else {
> 					sprintf(msg,"Неизвестный параметр %s",argv[i]);
> 					throw TException(100, msg);
341,342c341,344
<             else if( inputFileName[0][0] == 0 ){
<                 strcpy( inputFileName[0], s );
---
> 			} else {
> 				/* указана неизвестная опция */
> 				sprintf(msg,"Неизвестный параметр %s",argv[i]);
> 				throw TException(100, msg);
344d345
<             else return 1;
347,348d347
<     if( cfgName[0] == 0 || inputFileName[0][0] == 0 ) return 1;
<     return 0;
351d349
< 
373,374c371
< 		}
< 		else {
---
> 		} else {
384c381
<     char drive[_MAX_DRIVE], dir[_MAX_DIR], path[_MAX_PATH];
---
> 	char path[MAX_PATH];
386d382
<     TCfg * cfg;
388,390c384,394
<     _splitpath( exeFileName, drive, dir, 0, 0 );
<     strcat( dir, dir[0] ? "data" : "\\data" );
<     _makepath( path, drive, dir, "multich", "dat" );
---
> 	strcpy(path,term_root);
> 	int t = strlen(path);
> 	/* Если надо, в конце добавляем разделитель */
> 	if(path[t-1]!='/'||path[t-1]!='\\'){
> 		path[t] = DIRD; path[t+1] = '\0';
> 	}
> #if DIRD == '/'
> 		strcat( path, "data/multich.dat" );
> #else
> 		strcat( path, "data\\multich.dat" );
> #endif
410,411c414
<             }
<             else if( id == satId ){
---
> 			} else if( id == satId ) {
420,421c423
<     }
<     else if( res == 1 ){
---
> 	} else if( res == 1 ) {
432,433c434,437
<     while( *p && isspace(*p) ) p++;
<     if( *p == '\0' || *p == '#' ) return 1;
---
> 	while( *p && isspace(*p) )
> 		p++;
> 	if( *p == '\0' || *p == '#' )
> 		return 1;
484d487
<         logfile->debug( " SST = B_1 (T_11) + B_2 (T_11-T_12) + B_3 (T_11-T_12) (sec(theta)-1) - B_4" );
502d504
< 
505a508
> 		logfile->debug( msg );
510c513
<         else if( params.night_type == 'N' ){
---
> 		else if (params.day_type == 'N') {
516,517d518
< 
<         logfile->debug( msg );
525a527
> 						TBlk0_AVHRR &in3_blk0, short *in3_data,
529,530c531
<         )
< {
---
> 					  ) {
705c706,707
<                     (delta45 > mParams.max_delta_day)) {
---
> 				     (delta45 > mParams.max_delta_day) ) 
> 				{
714a717
> 						out_data[pix] = 1;
727,728c730
<                 }
<                 else {
---
> 				} else {
731a734
> 					} 
733a737
> 						out_data[pix] = 1;
741,742c745
<             }
<             else {      // точки, расположенные между дневными и ночными,
---
> 			} else {      // точки, расположенные между дневными и ночными,
747c750,751
<                     (delta45 > mParams.max_delta_day) ){
---
> 				      (delta45 > mParams.max_delta_day) ) 
> 				{
749,750c753
<                 }
<                 else {
---
> 				} else {
756a760,762
> 						chmFloat[pix] = a;
> 						out_data[pix] = 1;
> 					}
821c827,828
<                 if( out_data[pix] > maxValue ) maxValue = out_data[pix];
---
> 				if( out_data[pix] > maxValue )
> 					maxValue = out_data[pix];
866,867c873
< double calcAngle(int nscan, int col, double date, TStraightReferencer & r )
< {
---
> double calcAngle(int nscan, int col, double date, TStraightReferencer & r ) {
918c924
<     const double h = 820.;      // Средняя высота спутника над горизонтом
---
> 	//const double h = 820.;      // Средняя высота спутника над горизонтом

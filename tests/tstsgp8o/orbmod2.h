/*--------------------------------------------------------------------------
	orbmod2.h
	Вариант орбитальной модели для OS/2 + VisualAge 3.0
	Date: 2 december 2003
	Date: 4 august 2006 Громов А.В.
		Модифицированы определения некоторых глобальных констант в
		соответствие с исходным документом по SGP8 ( SPACETRK.PDF ).
		См. также определения констант в тестовом файле T_SGP8F.C.
--------------------------------------------------------------------------*/
/* определения глобальных констант */

#define PI      3.141592653589793238463
//#define PI      3.14159265
//#define PI      3.1415926
#define RD      (180.0/PI)      /* Множитель перевода радиан в градусы. */
#define DR      (PI/180.0)      /* Множитель перевода градусов в радианы. */
//#define Ea      6378.135        /* Большая полуось земного эллипсоида WGS72. */
//#define Eb      6356.75052      /* Малая полуось земного эллипсоида WGS72. */
/* Параметры эллипсоида Земли. Совпадают с WGS84. */
#define Ea 6378.137             /* Большая полуось земного эллипсоида. */
#define Eb 6356.7523142         /* Малая полуось земного эллипсоида. */
#define Ee 8.1819190842622e-2   /* Эксцентриситет. */
#define Ee2 6.69437999014e-3    /* Квадрат эксцентриситета. */

#define AVHRR_SCAN_TIME (1./360.) /* Время формирования одного скана AVHRR в минутах. */
#define Ea2     (Ea*Ea)
#define Eb2     (Eb*Eb)
//#define Ee2     ((Ea2 - Eb2) / Ea2)
//#define Ee      sqrt( Ee2 )
#define MAX_ANGLE       0.96691240542   /* Максимальный угол сканирования. */
#define STEP_ANGLE      (MAX_ANGLE/1024.0)
#define D_OV    1.2153526424e-5
#define SIN_DOV 1.21535264237e-5
#define COS_DOV 9.999999999261458e-1

#define TW_TH   (2./3.)
#define TH_TW   1.5
#define SE_TH   (7./3.)

#define Ke      0.743669161e-1
#define	XJ2		1.082616e-3
#define	XJ3		(-0.253881e-5)
#define	XJ4		(-1.65597e-6)
#define K2      (0.5*XJ2)		/* 5.413080e-4	*/
#define TK2     (TH_TW*K2)		/* 8.11962e-4	*/
#define A3COF	(-XJ3/K2)
#define K3      (0.25*A3COF)	/* 1.172535e-3	*/
#define TK4     (-15.0/32.0*XJ4)	/* 7.76235937e-7 */
#define	Q0		120.0
#define	S0		78.0
#define	XKMPER	6378.135
//#define Qms4    1.88027916e-9
//#define Ser     1.01222928
#define Q0MS2T1	((Q0-S0)/XKMPER)
#define Q0MS2T2	(Q0MS2T1*Q0MS2T1)
#define Qms4	(Q0MS2T2*Q0MS2T2)
#define Ser		(1.0+S0/XKMPER)
#define CENTURY	1900

/*---------------------------------------------------------------------
	Структура параметров коррекции
---------------------------------------------------------------------*/
typedef struct {

	/* Коррекция ко времени начала сеанса в секундах. */
	double fTime;

	/* Коррекция ориентации сканера, в радианах. */
	double roll;
	double pitch;
	double yaw;

} TCorrectionParams;

/*--------------------------------------------------------------------------
	TIniSatParams
	Структура орбитальных параметров ( инициализируется из 0-блока )
--------------------------------------------------------------------------*/
typedef struct {
	unsigned short year;	/* Epoch year			*/
	double day;				/* Epoch day (1-based)		*/
	double n0;		/* Mean motion			*/
	double bstar;	/* BSTAR drag term		*/
	double i0;		/* Inclination			*/
	double raan;	/* Right ascension of AN	*/
	double e0;		/* Eccentricity			*/
	double w0;		/* Argument of perigee		*/
	double m0;		/* Mean anomaly			*/
} TIniSatParams;

/*---------------------------------------------------------------------
	TIniSatParams_1
	Функция заполняет структуру TIniSatParams данными
	NORAD-телеграммы из 0-блока нового формата.
	Прототип:
		void TIniSatParams_1( TIniSatParams* isp, struct TBlk0_uni* blk0 );
	Параметры:
	isp	Указатель на инициализируемую структуру.
	blk0	Указатель на структуру 0-блока с заполненными полями
		NORAD.
---------------------------------------------------------------------*/
extern void TIniSatParams_1 ( TIniSatParams*, struct TBlk0_uni* );

/*-------------------------------------------------------------------------
	TNOAAImageParams
	Структура, содержащая информацию о снимке, необходимую для его 
        географической привязки и визуализации.
-------------------------------------------------------------------------*/
typedef struct {
	unsigned short year;	/* Год из 0-блока для данного снимка, полный */
	double yearTime;		/* Время в году, в днях (1-based) */
	unsigned short scans;	/* Число сканов в снимке */
	unsigned short ascendFlag;	/* восходящий (1) / нисходящий(0) */
} TNOAAImageParams;

/*-------------------------------------------------------------------------
	TNOAAImageParams_1
	Функция, инициализирующая поля структуры TNOAAImageParams
	по 0-блоку нового формата.
        Вычисление поля ascendFlag производится при помощи орбитальной 
	модели,	для чего используется внутренняя структура isp.
	Прототип:
	void TNOAAImageParams_1( TNOAAImageParams* nip, struct TBlk0_uni* blk0 );
	Параметры:
	nip	Инициализируемая структура.
	blk0	Указатель на 0-блок нового формата. 0-блок должен
		содержать корректную информацию NORAD.
---------------------------------------------------------------------------*/
extern void TNOAAImageParams_1( TNOAAImageParams*, struct TBlk0_uni* );

/*--------------------------------------------------------------------------
	TSatParams
	Данная структура описывает состояние модели SGP8. Состоит из
	двух частей. Первая часть, неизменяемая, заполняется функцией
	iniSGP8 на базовый момент времени; вторая часть, изменяемая,
	вычисляется функцией SGP8 на заданный момент времени
	относительно базового.
--------------------------------------------------------------------------*/
typedef struct {
/*-------------------------------------------------------------------------
	Параметры, вычисляемые iniSGP8 ( первая часть ).
-------------------------------------------------------------------------*/
	double eptim;	/* Смещение в минутах базового момента времени
			относительно времени прогнозных орбитальных элементов,
			в минутах. */

	double on0;	// Original mean motion.
	double a0;	// Semimajor axis.
	double dn;	// Производная по времени среднего движения.
	double de;	// Производная по времени эксцентриситета.

	double omf, oms;	/* две компоненты производной прямого
			восхождения; их сумма дает полную производную
			прямого восхождения, т.е. (RAAN)'. */
	double wf, ws;		/* две компоненты производной 
                        аргумента перигея; их сумма дает изменение аргумента
			перигея в минуту; умноженная на 1440 дает изменение
			аргумента перигея за сутки. */
	double mf, ms;

	double ov0;	// Угол на Овен

/*-------------------------------------------------------------------------
	Параметры, вычисляемые SGP8 ( вторая часть ).
-------------------------------------------------------------------------*/
	double reltim;	/* Текущее время, ему соответствуют все 
			остальные поля этой части структуры.
			Выражено относительно базового времени в минутах.
			Может быть отрицательным. */

	double	r[3];	/* Радиус-вектор положения спутника в неподвижной с.к., 
			километры */
	double	v[3];	/* Скорость в неподвижной с.к. */

	double m;	// Средняя аномалия.
	double E;	// Эксцентрическая аномалия.
	double f;	// Истинная аномалия.
	double ov;	// Угол на Овен.
	double raan;	// Восходящий узел.
	double e;	// Eccentricity.
	double n;	// Среднее движение.
	double w;	// Аргумент перигея.
} TSatParams;

/*--------------------------------------------------------------------------
	iniSGP8
	Функция, заполняющая постоянную часть структуры TSatParams.
	Параметры baseYear и baseYearTime определяют базовый момент времени.
	Прототип:
	void iniSGP8( TSatParams *sat, TIniSatParams *isp,
	        unsigned short baseYear, double baseYearTime, TCorrectionParams *cop )
	Параметры:
	sat		Указатель на заполняемую структуру.
	isp		Прогнозные орбитальные параметры, которые будут
			использоваться для вычислений.
	baseYear	Год ( полный )
	baseYearTime	Время в году, в днях (1-based).
	cop		Указатель на структуру, содержащую значения
			корректирующих параметров. Из всех полей структуры
			используется только fTime.
			Может быть NULL.
--------------------------------------------------------------------------*/
extern void iniSGP8 ( TSatParams*, TIniSatParams*, unsigned short, double,
	TCorrectionParams* );

extern short isLeapYear( short );
extern double timeBetween( unsigned short, double, unsigned short, double );
extern double dinpi ( double );

/*--------------------------------------------------------------------------
	SGP8
	Производит вычисление орбитальных элементов по орбитальной модели
	SGP8 на заданный момент времени относительно базового, указанного
	при вызове iniSGP8.
	Прототип:
	void SGP8( TSatParams* sat, TIniSatParams* isp, double relTime )
	Параметры:
	sat	Указатель на структуру, во вторую часть которой (см. описание
		структуры) будут помещены результаты вычислений.
	isp	Указатель на заполненную структуру прогнозных орбитальных
		параметров. Ее содержимое должно совпадать с тем, что
		было при вызове функции iniSGP8.
	relTime	Время, для которого будут просчитаны орбитальные элементы.
		Задается в минутах относительно базового.
--------------------------------------------------------------------------*/
extern void SGP8( TSatParams*, TIniSatParams*, double );

/*--------------------------------------------------------------------------
	iniIJ2LL
	Функция производит инициализацию внутренних переменных модуля,
	необходимую для работы функции IJ2LL.
	Прототип:
		void iniIJ2LL( TIniSatParams* isp, TNOAAImageParams* nip,
			TCorrectionParams* cop )
	Параметры:
	isp	Указатель на заполненную структуру прогнозных орбитальных
		параметров.
	nip	Указатель на заполненную структуру информации о снимке, для
		которого будет решаться прямая задача географической
		привязки.
	cop	Указатель на заполненную структуру корректирующих параметров.
		Может быть NULL.
--------------------------------------------------------------------------*/
extern void iniIJ2LL( TIniSatParams*, TNOAAImageParams*, TCorrectionParams* );

/*--------------------------------------------------------------------------
	IJ2LL
	Функция решает задачу определения географических координат, 
	соответствующих произвольной точке снимка.
	Прототип:
		void IJ2LL( double x, double y, double *lon, double *lat )
	Параметры:
	x		Столбец точки снимка ( 0 <= x < 2048 )
	y		Строка точки снимка ( 0 <= y < total_scan )
	lat, lon	Через эти параметры будет возвращены географические
			координаты, соответствующие точке снимка.
			-PI < lon <= PI
			-PI/2 <= lat <= PI/2
Внимание! Если x, y равны полюсу на снимке, что выдаст эта функция ?
--------------------------------------------------------------------------*/
extern void IJ2LL( double, double, double*, double* );

